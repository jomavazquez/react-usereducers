{"version":3,"sources":["helpers/todoReducer.js","components/TodoListItem.js","components/TodoList.js","components/TodoForm.js","hooks/useForm.js","components/App.js","index.js"],"names":["todoReducer","state","action","type","payload","filter","todo","id","map","done","TodoListItem","index","handleToggle","handleDelete","className","onClick","desc","TodoList","todos","i","TodoForm","handleAddTodo","initialState","useState","values","setValues","target","name","value","useForm","description","handleInputChange","reset","e","preventDefault","trim","length","newTodo","Date","getTime","placeholder","autoComplete","onChange","App","useReducer","JSON","parse","localStorage","getItem","dispatch","useEffect","setItem","stringify","todoId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9398454c.chunk.js","sourcesContent":["// -----------------------------------------------------------\r\n// React libreries\r\n// -----------------------------------------------------------\r\nexport const todoReducer = ( state = [], action ) => {\r\n\r\n    switch( action.type ){\r\n\r\n        case 'add':\r\n            return [...state, action.payload];\r\n\r\n        case 'delete':\r\n\r\n            //Filter regresa un nuevo array\r\n            return state.filter( todo => todo.id !== action.payload );\r\n        \r\n        case 'toggle':\r\n            return state.map( todo => (\r\n                todo.id === action.payload ? { ...todo, done: !todo.done } : todo\r\n            ))\r\n\r\n        default:\r\n            return state;\r\n    }\r\n\r\n}","// -----------------------------------------------------------\r\n// React libreries\r\n// -----------------------------------------------------------\r\nimport React from 'react'\r\n\r\nexport const TodoListItem = ({ todo, index, handleToggle, handleDelete }) => {\r\n    return (\r\n        <li key={ todo.id } className=\"list-group-item\">\r\n            <p \r\n                className={ `${ todo.done && 'complete' }`}\r\n                onClick={ () => handleToggle( todo.id )}\r\n            >\r\n                {index + 1}. { todo.desc }\r\n            </p>\r\n            <button className=\"btn btn-danger\" onClick={ () => handleDelete( todo.id ) }>\r\n                Delete\r\n            </button>\r\n        </li>\r\n    )\r\n}\r\n","// -----------------------------------------------------------\r\n// React libreries\r\n// -----------------------------------------------------------\r\nimport React from 'react'\r\nimport { TodoListItem } from './TodoListItem'\r\n\r\nexport const TodoList = ( { todos, handleToggle, handleDelete }) => {\r\n    return (\r\n        <ul className=\"list-group list-group-flush\">\r\n            {\r\n                todos.map( (todo, i) => (\r\n                    <TodoListItem \r\n                        key={ todo.id }\r\n                        todo={ todo } \r\n                        handleToggle={ handleToggle } \r\n                        handleDelete={ handleDelete } \r\n                        index={ i }\r\n                    />\r\n                ))\r\n            }\r\n        </ul>\r\n    )\r\n}\r\n","// -----------------------------------------------------------\r\n// React libreries\r\n// -----------------------------------------------------------\r\nimport React from 'react'\r\nimport { useForm } from '../hooks/useForm';\r\n\r\nexport const TodoForm = ( { handleAddTodo }) => {\r\n\r\n    const [ { description }, handleInputChange, reset ] = useForm({\r\n        description: ''\r\n    });    \r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        \r\n        if( description.trim().length <= 1 ){\r\n            return;\r\n        }\r\n\r\n        const newTodo = {\r\n            id: new Date().getTime(),\r\n            desc: description,\r\n            done: false\r\n        }\r\n\r\n        handleAddTodo( newTodo );\r\n        reset();\r\n    }\r\n\r\n    return (\r\n        <div className=\"bg-gray p-3\">\r\n            <h4 className=\"mt-2 mb-3\">Add a task</h4>\r\n            <form onClick={ handleSubmit }>\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"description\"\r\n                    placeholder=\"Enter whatever you want ...\"\r\n                    autoComplete=\"off\"\r\n                    className=\"form-control mb-2\"\r\n                    onChange={ handleInputChange }\r\n                    value={ description }\r\n                >\r\n                </input>\r\n                <button \r\n                    type=\"submit\"\r\n                    className=\"btn btn-primary mt-1 btn-block\"\r\n                >\r\n                    Send\r\n                </button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n","// -----------------------------------------------------------\r\n// React libreries\r\n// -----------------------------------------------------------\r\nimport { useState } from \"react\";\r\n\r\nexport const useForm = ( initialState = {} ) => {\r\n\r\n    const [values, setValues] = useState( initialState );\r\n\r\n    const reset = () => {\r\n        setValues( initialState );\r\n    }\r\n    \r\n    const handleInputChange = ( { target } ) => {\r\n        setValues({\r\n            ...values,\r\n            [ target.name ]: target.value\r\n        });\r\n    }\r\n\r\n    return [ values, handleInputChange, reset ];\r\n\r\n}","import React, { useEffect, useReducer } from 'react';\nimport { todoReducer } from '../helpers/todoReducer';\nimport { TodoList } from './TodoList';\nimport { TodoForm } from '../components/TodoForm';\n\nexport const App = () => {\n\n  // ----------------------\n  // Initialization\n  // ----------------------\n  const init = () => {\n    return JSON.parse(localStorage.getItem('todos')) || [];\n  };\n\n  const [ todos, dispatch ] = useReducer( todoReducer, [], init );\n\n  useEffect( () =>{\n    localStorage.setItem('todos', JSON.stringify( todos ));\n  }, [todos]);\n  \n  // ----------------------\n  // Actions for useReducer\n  // ----------------------\n  const handleDelete = ( todoId ) => {\n\n    const action = {\n      type: 'delete',\n      payload: todoId\n    }\n\n    dispatch( action );\n\n  }\n\n  const handleToggle = ( todoId ) => {\n    \n    dispatch({\n      type: 'toggle',\n      payload: todoId\n    });\n\n  }\n\n  const handleAddTodo = ( newTodo ) => {\n\n    dispatch({\n      type: 'add',\n      payload: newTodo\n    });\n\n  }\n\n  return (\n    <div>\n      <h1>ToDo List <small>({ todos.length })</small></h1>\n      <hr />\n      <p>\n        Using reducers, localStorage and custom Hooks. Just add a task, and <strong>click on one of them if you've completed it!</strong>\n      </p>\n      <hr />\n      <div className=\"row\">\n        <div className=\"col-md-7\">\n          <TodoList \n            todos={ todos }\n            handleToggle={ handleToggle }\n            handleDelete={ handleDelete }\n          />\n        </div>\n        <div className=\"col-md-5\">\n          <TodoForm\n            handleAddTodo={ handleAddTodo }\n          />\n        </div>\n      </div>\n    </div>\n  )\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './components/App';\n\nimport './index.css';\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n);"],"sourceRoot":""}